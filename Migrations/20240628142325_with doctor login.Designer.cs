// <auto-generated />
using System;
using Egyptian_association_of_cieliac_patients_api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egyptian_association_of_cieliac_patients.Migrations
{
    [DbContext(typeof(EgyptianAssociationOfCieliacPatientsContext))]
    [Migration("20240628142325_with doctor login")]
    partial class withdoctorlogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", b =>
                {
                    b.Property<int>("AssosiationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssosiationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("AssosiationId");

                    b.ToTable("assosiation_branch");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranchPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.HasKey("PhoneNumber", "AssosiationId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("assosiation_branch_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationDisesFollow", b =>
                {
                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.HasKey("DisesId", "AssosiationId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("assosiation_dises_follow");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationInsuranceProvide", b =>
                {
                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("AssosiationId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("assosiation_insurance_provide");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("ClinicId");

                    b.ToTable("clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("clinic_address");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.HasKey("Address", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAssosiationDiscount", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("ClinicId", "AssosiationId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("clinic_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicInsuranceDiscount", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("ClinicId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("clinic_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.HasKey("PhoneNumber", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Dises", b =>
                {
                    b.Property<int>("DisesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DisesId");

                    b.ToTable("dises");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesMaterialCatogrize", b =>
                {
                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<string>("CatogeryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("catogery_name");

                    b.HasKey("DisesId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("dises_material_catogrize");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesProductCatogrize", b =>
                {
                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("CatogertName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("catogert_name");

                    b.HasKey("DisesId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("dises_product_catogrize");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("major");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DoctorId");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorClinicWork", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("ArriveTime")
                        .HasColumnType("time")
                        .HasColumnName("arrive_time");

                    b.Property<TimeOnly>("LeaveTime")
                        .HasColumnType("time")
                        .HasColumnName("leave_time");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_clinic_work");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorMedicalrecordVeiw", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.HasKey("RecordId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_medicalrecord_veiw");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.HasKey("PhoneNumber", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"));

                    b.Property<int>("LicenseCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("InsuranceId");

                    b.ToTable("health_insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("HospitalId");

                    b.ToTable("hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("hospital_address");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<int>("hospitalId")
                        .HasColumnType("int");

                    b.HasKey("Address", "HospitalId");

                    b.HasIndex("hospitalId");

                    b.ToTable("hospital_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalInsuranceDiscount", b =>
                {
                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("HospitalId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("hospital_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.HasKey("PhoneNumber", "HospitalId");

                    b.HasIndex("HospitalId");

                    b.ToTable("hospital_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalType", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("hospital_type");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("hospital_id");

                    b.HasKey("Type", "HospitalId");

                    b.HasIndex("HospitalId");

                    b.ToTable("hospital_type");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsuranceAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.HasKey("Address", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("insurance_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsurancePhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.HasKey("PhoneNumber", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("insurance_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Lab", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("LabId");

                    b.ToTable("lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("lab_address");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int>("labId")
                        .HasColumnType("int");

                    b.HasKey("Address", "LabId");

                    b.HasIndex("labId");

                    b.ToTable("lab_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAssosiationDiscount", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("LabId", "AssosiationId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("lab_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabInsuranceDiscount", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("LabId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("lab_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasKey("PhoneNumber", "LabId");

                    b.HasIndex("LabId");

                    b.ToTable("lab_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabType", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("lab_type");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasKey("Type", "LabId");

                    b.HasIndex("LabId");

                    b.ToTable("lab_type");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("RecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordDrug", b =>
                {
                    b.Property<string>("Drug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drug");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.HasKey("Drug", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("medical_record-drug");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordTest", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("TestsPath")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test");

                    b.HasKey("RecordId", "TestsPath");

                    b.ToTable("medical_record-test");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_details");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ShipmentLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipment_location");

                    b.Property<string>("ShipmentPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shipment_phone");

                    b.Property<TimeOnly>("ShipmentTime")
                        .HasColumnType("time")
                        .HasColumnName("shipment_time");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("money")
                        .HasColumnName("total_cost");

                    b.HasKey("OrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("PatientBloodtype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("patient_bloodtype")
                        .IsFixedLength();

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("patient_name");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SSN");

                    b.Property<int?>("assosiationid")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.HasKey("PatientId");

                    b.HasIndex("assosiationid");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("Address", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientDisesHave", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("DisesId")
                        .HasColumnType("int")
                        .HasColumnName("dises_id");

                    b.HasKey("PatientId", "DisesId");

                    b.HasIndex("DisesId");

                    b.ToTable("patient_dises-have");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.HasKey("PhoneNumber", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientProductView", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("PatientId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("patient_product_view");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientRawmaterialVeiw", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.HasKey("PatientId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("patient_rawmaterial_veiw");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("payment_type")
                        .IsFixedLength();

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("money")
                        .HasColumnName("total_paid");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Pharmacy", b =>
                {
                    b.Property<int>("pharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pharmacyId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.HasKey("pharmacyId");

                    b.ToTable("pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("pharmacy_address");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.HasKey("Address", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_address");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAssosiationDiscount", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.Property<int>("AssosiationId")
                        .HasColumnType("int")
                        .HasColumnName("assosiation_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("PharmacyId", "AssosiationId");

                    b.HasIndex("AssosiationId");

                    b.ToTable("pharmacy_assosiation_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyInsuranceDiscount", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_id");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_id");

                    b.Property<double>("DiscountPrecentage")
                        .HasColumnType("float")
                        .HasColumnName("discount_precentage");

                    b.HasKey("PharmacyId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("pharmacy_insurance_discount");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacy_id");

                    b.HasKey("PhoneNumber", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("pharmacy_phone");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderid");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("image_path");

                    b.HasKey("ProductId", "ImagePath");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderid");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("MaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("raw_material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterialImage", b =>
                {
                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("image_path");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.HasKey("ImagePath", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("rawmaterial_image");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_type");

                    b.Property<DateOnly>("BookDate")
                        .HasColumnType("date")
                        .HasColumnName("book_date");

                    b.Property<TimeOnly>("BookTime")
                        .HasColumnType("time")
                        .HasColumnName("book_time");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("reservation_date");

                    b.Property<TimeOnly>("ReservationTime")
                        .HasColumnType("time")
                        .HasColumnName("reservation_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "674e660d-a744-4b05-9b3a-0a7bb9207feb",
                            ConcurrencyStamp = "4a569597-09c0-4800-b256-a39c2fc7d13c",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f42e9cfa-5be8-42e5-8388-5a3fa4094239",
                            ConcurrencyStamp = "37fec942-f74a-46b5-9acd-799f7caf060f",
                            Name = "UserManager",
                            NormalizedName = "usermanager"
                        },
                        new
                        {
                            Id = "0f7672e1-c8c9-44dc-9697-bb32ec7a382c",
                            ConcurrencyStamp = "bd6124a1-e644-4605-9c11-9625eed2ce12",
                            Name = "StoreManager",
                            NormalizedName = "storemanager"
                        },
                        new
                        {
                            Id = "a554ce68-1553-4894-bc3b-6674dd862ccd",
                            ConcurrencyStamp = "86f31da4-17bf-4695-93f3-3247f6e70e05",
                            Name = "MedicalManager",
                            NormalizedName = "medicalmanager"
                        },
                        new
                        {
                            Id = "135db849-00cd-4039-9c03-5a016bac933d",
                            ConcurrencyStamp = "0c43984d-edc7-479b-83c1-4dde6ff098fa",
                            Name = "Doctor",
                            NormalizedName = "doctor"
                        },
                        new
                        {
                            Id = "e3d65d39-2780-4743-bc57-f53053827f62",
                            ConcurrencyStamp = "0795b71b-4045-4e8c-baca-e884c1354a43",
                            Name = "NormalUser",
                            NormalizedName = "normaluser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranchPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_branch_phone_assosiation_branch");

                    b.Navigation("Assosiation");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationDisesFollow", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("Dises")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_dises_follow_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dises", "Dises")
                        .WithMany("Branches")
                        .HasForeignKey("DisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_dises__dises");

                    b.Navigation("Assosiation");

                    b.Navigation("Dises");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationInsuranceProvide", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("insurances")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("AssosiationBranches")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_assosiation_health_insurance");

                    b.Navigation("Assosiation");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany("clinicaddreses")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("clinics")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_clinic_assosiation_discount_assosiation_branch");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany("branches")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_clinic_assosiation_discount_clinic");

                    b.Navigation("Assosiation");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany("insurences")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_clinic_insurance_discount_clinic");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("clinics")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_clinic_insurance_discount_health_insurance");

                    b.Navigation("Clinic");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ClinicPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany("clinicphones")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_clinic_phone_clinic");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesMaterialCatogrize", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dises", "Dises")
                        .WithMany("Materials")
                        .HasForeignKey("DisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_raw_material_dises_catogrize_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany("dises")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_raw_material_dises_catogrize_raw_material");

                    b.Navigation("Dises");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DisesProductCatogrize", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dises", "Dises")
                        .WithMany("Products")
                        .HasForeignKey("DisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dises_product_catogrize_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany("dises")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dises_product_catogrize_product");

                    b.Navigation("Dises");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorClinicWork", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_doctor_clinic_work_clinic");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany("clinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_doctor_clinic_work_doctor");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorMedicalrecordVeiw", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany("medicalrecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_doctor_medicalrecord_veiw_doctor");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany("Doctors")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_doctor_medicalrecord_veiw_medical_record");

                    b.Navigation("Doctor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.DoctorPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Doctor", "Doctor")
                        .WithMany("DoctorPhones")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_doctor_phone_doctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany("addresses")
                        .HasForeignKey("hospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany("insurances")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("hospitals")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HospitalType", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Hospital", "Hospital")
                        .WithMany("types")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsuranceAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("addresses")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_insurance_address_health_insurance");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.InsurancePhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_insurance_phone_health_insurance");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany("addresses")
                        .HasForeignKey("labId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("labs")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany("AssosiationBranches")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assosiation");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("labs")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany("insurances")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.LabType", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Lab", "Lab")
                        .WithMany("types")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Medicalrecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_medical_record-patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordDrug", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany("Drugs")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_medical_record-drug_medical_record");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecordTest", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", "Record")
                        .WithMany("Tests")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_medical_record-test_medical_record");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Order", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("Patients")
                        .HasForeignKey("assosiationid");

                    b.Navigation("Assosiation");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_address_patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientDisesHave", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Dises", "Dises")
                        .WithMany("patients")
                        .HasForeignKey("DisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_dises-have_dises");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Diseses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_dises-have_patient");

                    b.Navigation("Dises");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_phone_patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientProductView", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("products")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_product_view_patient");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany("patients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_product_view_product");

                    b.Navigation("Patient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PatientRawmaterialVeiw", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany("patients")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_rawmaterial_veiw_raw_material");

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("Materials")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_patient_rawmaterial_veiw_patient");

                    b.Navigation("Material");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Payment", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAddress", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany("addresses")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyAssosiationDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", "Assosiation")
                        .WithMany("pharmacys")
                        .HasForeignKey("AssosiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany("AssosiationBranches")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assosiation");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyInsuranceDiscount", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", "Insurance")
                        .WithMany("pharmacys")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany("insurances")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.PharmacyPhone", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Pharmacy", "Pharmacy")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Product", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Order", "Order")
                        .WithMany("products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.ProductImage", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_image_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterial", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Order", "Order")
                        .WithMany("Matrerials")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterialImage", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.RawMaterial", "Material")
                        .WithMany("Images")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_rawmaterial_image_raw_material");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Reservation", b =>
                {
                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Clinic", "clinic")
                        .WithMany("patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egyptian_association_of_cieliac_patients.Models.Patient", "Patient")
                        .WithMany("clinics")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("clinic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.AssosiationBranch", b =>
                {
                    b.Navigation("Dises");

                    b.Navigation("Patients");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("clinics");

                    b.Navigation("insurances");

                    b.Navigation("labs");

                    b.Navigation("pharmacys");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Clinic", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("branches");

                    b.Navigation("clinicaddreses");

                    b.Navigation("clinicphones");

                    b.Navigation("insurences");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Dises", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Materials");

                    b.Navigation("Products");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Doctor", b =>
                {
                    b.Navigation("DoctorPhones");

                    b.Navigation("clinics");

                    b.Navigation("medicalrecords");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.HealthInsurance", b =>
                {
                    b.Navigation("AssosiationBranches");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("addresses");

                    b.Navigation("clinics");

                    b.Navigation("hospitals");

                    b.Navigation("labs");

                    b.Navigation("pharmacys");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Hospital", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("addresses");

                    b.Navigation("insurances");

                    b.Navigation("types");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Lab", b =>
                {
                    b.Navigation("AssosiationBranches");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("addresses");

                    b.Navigation("insurances");

                    b.Navigation("types");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.MedicalRecord", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Drugs");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Order", b =>
                {
                    b.Navigation("Matrerials");

                    b.Navigation("products");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Diseses");

                    b.Navigation("Materials");

                    b.Navigation("Medicalrecords");

                    b.Navigation("Orders");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("clinics");

                    b.Navigation("products");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Pharmacy", b =>
                {
                    b.Navigation("AssosiationBranches");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("addresses");

                    b.Navigation("insurances");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("dises");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Egyptian_association_of_cieliac_patients.Models.RawMaterial", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("dises");

                    b.Navigation("patients");
                });
#pragma warning restore 612, 618
        }
    }
}
